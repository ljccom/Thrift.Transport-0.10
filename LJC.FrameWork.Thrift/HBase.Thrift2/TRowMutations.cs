/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace HBase.Thrift2
{
    /// <summary>
    /// A TRowMutations object is used to apply a number of Mutations to a single row.
    /// </summary>
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TRowMutations : TBase
    {

        public byte[] Row { get; set; }

        public List<TMutation> Mutations { get; set; }

        public TRowMutations()
        {
        }

        public TRowMutations(byte[] row, List<TMutation> mutations)
            : this()
        {
            this.Row = row;
            this.Mutations = mutations;
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_row = false;
                bool isset_mutations = false;
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Row = iprot.ReadBinary();
                                isset_row = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    Mutations = new List<TMutation>();
                                    TList _list62 = iprot.ReadListBegin();
                                    for (int _i63 = 0; _i63 < _list62.Count; ++_i63)
                                    {
                                        TMutation _elem64;
                                        _elem64 = new TMutation();
                                        _elem64.Read(iprot);
                                        Mutations.Add(_elem64);
                                    }
                                    iprot.ReadListEnd();
                                }
                                isset_mutations = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
                if (!isset_row)
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                if (!isset_mutations)
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TRowMutations");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                field.Name = "row";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteBinary(Row);
                oprot.WriteFieldEnd();
                field.Name = "mutations";
                field.Type = TType.List;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, Mutations.Count));
                    foreach (TMutation _iter65 in Mutations)
                    {
                        _iter65.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("TRowMutations(");
            __sb.Append(", Row: ");
            __sb.Append(Row);
            __sb.Append(", Mutations: ");
            __sb.Append(Mutations);
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}