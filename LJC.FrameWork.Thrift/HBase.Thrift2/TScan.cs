/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace HBase.Thrift2
{
    /// <summary>
    /// Any timestamps in the columns are ignored, use timeRange to select by timestamp.
    /// Max versions defaults to 1.
    /// </summary>
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TScan : TBase
    {
        private byte[] _startRow;
        private byte[] _stopRow;
        private List<TColumn> _columns;
        private int _caching;
        private int _maxVersions;
        private TTimeRange _timeRange;
        private byte[] _filterString;
        private int _batchSize;
        private Dictionary<byte[], byte[]> _attributes;
        private TAuthorization _authorizations;
        private bool _reversed;
        private bool _cacheBlocks;

        public byte[] StartRow
        {
            get
            {
                return _startRow;
            }
            set
            {
                __isset.startRow = true;
                this._startRow = value;
            }
        }

        public byte[] StopRow
        {
            get
            {
                return _stopRow;
            }
            set
            {
                __isset.stopRow = true;
                this._stopRow = value;
            }
        }

        public List<TColumn> Columns
        {
            get
            {
                return _columns;
            }
            set
            {
                __isset.columns = true;
                this._columns = value;
            }
        }

        public int Caching
        {
            get
            {
                return _caching;
            }
            set
            {
                __isset.caching = true;
                this._caching = value;
            }
        }

        public int MaxVersions
        {
            get
            {
                return _maxVersions;
            }
            set
            {
                __isset.maxVersions = true;
                this._maxVersions = value;
            }
        }

        public TTimeRange TimeRange
        {
            get
            {
                return _timeRange;
            }
            set
            {
                __isset.timeRange = true;
                this._timeRange = value;
            }
        }

        public byte[] FilterString
        {
            get
            {
                return _filterString;
            }
            set
            {
                __isset.filterString = true;
                this._filterString = value;
            }
        }

        public int BatchSize
        {
            get
            {
                return _batchSize;
            }
            set
            {
                __isset.batchSize = true;
                this._batchSize = value;
            }
        }

        public Dictionary<byte[], byte[]> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                __isset.attributes = true;
                this._attributes = value;
            }
        }

        public TAuthorization Authorizations
        {
            get
            {
                return _authorizations;
            }
            set
            {
                __isset.authorizations = true;
                this._authorizations = value;
            }
        }

        public bool Reversed
        {
            get
            {
                return _reversed;
            }
            set
            {
                __isset.reversed = true;
                this._reversed = value;
            }
        }

        public bool CacheBlocks
        {
            get
            {
                return _cacheBlocks;
            }
            set
            {
                __isset.cacheBlocks = true;
                this._cacheBlocks = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool startRow;
            public bool stopRow;
            public bool columns;
            public bool caching;
            public bool maxVersions;
            public bool timeRange;
            public bool filterString;
            public bool batchSize;
            public bool attributes;
            public bool authorizations;
            public bool reversed;
            public bool cacheBlocks;
        }

        public TScan()
        {
            this._maxVersions = 1;
            this.__isset.maxVersions = true;
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                StartRow = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                StopRow = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    Columns = new List<TColumn>();
                                    TList _list53 = iprot.ReadListBegin();
                                    for (int _i54 = 0; _i54 < _list53.Count; ++_i54)
                                    {
                                        TColumn _elem55;
                                        _elem55 = new TColumn();
                                        _elem55.Read(iprot);
                                        Columns.Add(_elem55);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I32)
                            {
                                Caching = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.I32)
                            {
                                MaxVersions = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 6:
                            if (field.Type == TType.Struct)
                            {
                                TimeRange = new TTimeRange();
                                TimeRange.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 7:
                            if (field.Type == TType.String)
                            {
                                FilterString = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 8:
                            if (field.Type == TType.I32)
                            {
                                BatchSize = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 9:
                            if (field.Type == TType.Map)
                            {
                                {
                                    Attributes = new Dictionary<byte[], byte[]>();
                                    TMap _map56 = iprot.ReadMapBegin();
                                    for (int _i57 = 0; _i57 < _map56.Count; ++_i57)
                                    {
                                        byte[] _key58;
                                        byte[] _val59;
                                        _key58 = iprot.ReadBinary();
                                        _val59 = iprot.ReadBinary();
                                        Attributes[_key58] = _val59;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 10:
                            if (field.Type == TType.Struct)
                            {
                                Authorizations = new TAuthorization();
                                Authorizations.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 11:
                            if (field.Type == TType.Bool)
                            {
                                Reversed = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 12:
                            if (field.Type == TType.Bool)
                            {
                                CacheBlocks = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TScan");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (StartRow != null && __isset.startRow)
                {
                    field.Name = "startRow";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(StartRow);
                    oprot.WriteFieldEnd();
                }
                if (StopRow != null && __isset.stopRow)
                {
                    field.Name = "stopRow";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(StopRow);
                    oprot.WriteFieldEnd();
                }
                if (Columns != null && __isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, Columns.Count));
                        foreach (TColumn _iter60 in Columns)
                        {
                            _iter60.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.caching)
                {
                    field.Name = "caching";
                    field.Type = TType.I32;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Caching);
                    oprot.WriteFieldEnd();
                }
                if (__isset.maxVersions)
                {
                    field.Name = "maxVersions";
                    field.Type = TType.I32;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(MaxVersions);
                    oprot.WriteFieldEnd();
                }
                if (TimeRange != null && __isset.timeRange)
                {
                    field.Name = "timeRange";
                    field.Type = TType.Struct;
                    field.ID = 6;
                    oprot.WriteFieldBegin(field);
                    TimeRange.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (FilterString != null && __isset.filterString)
                {
                    field.Name = "filterString";
                    field.Type = TType.String;
                    field.ID = 7;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(FilterString);
                    oprot.WriteFieldEnd();
                }
                if (__isset.batchSize)
                {
                    field.Name = "batchSize";
                    field.Type = TType.I32;
                    field.ID = 8;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(BatchSize);
                    oprot.WriteFieldEnd();
                }
                if (Attributes != null && __isset.attributes)
                {
                    field.Name = "attributes";
                    field.Type = TType.Map;
                    field.ID = 9;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Attributes.Count));
                        foreach (byte[] _iter61 in Attributes.Keys)
                        {
                            oprot.WriteBinary(_iter61);
                            oprot.WriteBinary(Attributes[_iter61]);
                        }
                        oprot.WriteMapEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (Authorizations != null && __isset.authorizations)
                {
                    field.Name = "authorizations";
                    field.Type = TType.Struct;
                    field.ID = 10;
                    oprot.WriteFieldBegin(field);
                    Authorizations.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (__isset.reversed)
                {
                    field.Name = "reversed";
                    field.Type = TType.Bool;
                    field.ID = 11;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Reversed);
                    oprot.WriteFieldEnd();
                }
                if (__isset.cacheBlocks)
                {
                    field.Name = "cacheBlocks";
                    field.Type = TType.Bool;
                    field.ID = 12;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(CacheBlocks);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("TScan(");
            bool __first = true;
            if (StartRow != null && __isset.startRow)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("StartRow: ");
                __sb.Append(StartRow);
            }
            if (StopRow != null && __isset.stopRow)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("StopRow: ");
                __sb.Append(StopRow);
            }
            if (Columns != null && __isset.columns)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Columns: ");
                __sb.Append(Columns);
            }
            if (__isset.caching)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Caching: ");
                __sb.Append(Caching);
            }
            if (__isset.maxVersions)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("MaxVersions: ");
                __sb.Append(MaxVersions);
            }
            if (TimeRange != null && __isset.timeRange)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("TimeRange: ");
                __sb.Append(TimeRange == null ? "<null>" : TimeRange.ToString());
            }
            if (FilterString != null && __isset.filterString)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("FilterString: ");
                __sb.Append(FilterString);
            }
            if (__isset.batchSize)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("BatchSize: ");
                __sb.Append(BatchSize);
            }
            if (Attributes != null && __isset.attributes)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Attributes: ");
                __sb.Append(Attributes);
            }
            if (Authorizations != null && __isset.authorizations)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Authorizations: ");
                __sb.Append(Authorizations == null ? "<null>" : Authorizations.ToString());
            }
            if (__isset.reversed)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Reversed: ");
                __sb.Append(Reversed);
            }
            if (__isset.cacheBlocks)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CacheBlocks: ");
                __sb.Append(CacheBlocks);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}