/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace HBase.Thrift2
{
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TTimeRange : TBase
    {

        public long MinStamp { get; set; }

        public long MaxStamp { get; set; }

        public TTimeRange()
        {
        }

        public TTimeRange(long minStamp, long maxStamp)
            : this()
        {
            this.MinStamp = minStamp;
            this.MaxStamp = maxStamp;
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_minStamp = false;
                bool isset_maxStamp = false;
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I64)
                            {
                                MinStamp = iprot.ReadI64();
                                isset_minStamp = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.I64)
                            {
                                MaxStamp = iprot.ReadI64();
                                isset_maxStamp = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
                if (!isset_minStamp)
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                if (!isset_maxStamp)
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TTimeRange");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                field.Name = "minStamp";
                field.Type = TType.I64;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(MinStamp);
                oprot.WriteFieldEnd();
                field.Name = "maxStamp";
                field.Type = TType.I64;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(MaxStamp);
                oprot.WriteFieldEnd();
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("TTimeRange(");
            __sb.Append(", MinStamp: ");
            __sb.Append(MinStamp);
            __sb.Append(", MaxStamp: ");
            __sb.Append(MaxStamp);
            __sb.Append(")");
            return __sb.ToString();
        }

    }
}
