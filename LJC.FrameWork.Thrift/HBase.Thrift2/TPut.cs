/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace HBase.Thrift2
{
    /// <summary>
    /// Used to perform Put operations for a single row.
    /// 
    /// Add column values to this object and they'll be added.
    /// You can provide a default timestamp if the column values
    /// don't have one. If you don't provide a default timestamp
    /// the current time is inserted.
    /// 
    /// You can specify how this Put should be written to the write-ahead Log (WAL)
    /// by changing the durability. If you don't provide durability, it defaults to
    /// column family's default setting for durability.
    /// </summary>
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TPut : TBase
    {
        private long _timestamp;
        private Dictionary<byte[], byte[]> _attributes;
        private TDurability _durability;
        private TCellVisibility _cellVisibility;

        public byte[] Row { get; set; }

        public List<TColumnValue> ColumnValues { get; set; }

        public long Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                __isset.timestamp = true;
                this._timestamp = value;
            }
        }

        public Dictionary<byte[], byte[]> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                __isset.attributes = true;
                this._attributes = value;
            }
        }

        /// <summary>
        /// 
        /// <seealso cref="TDurability"/>
        /// </summary>
        public TDurability Durability
        {
            get
            {
                return _durability;
            }
            set
            {
                __isset.durability = true;
                this._durability = value;
            }
        }

        public TCellVisibility CellVisibility
        {
            get
            {
                return _cellVisibility;
            }
            set
            {
                __isset.cellVisibility = true;
                this._cellVisibility = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool timestamp;
            public bool attributes;
            public bool durability;
            public bool cellVisibility;
        }

        public TPut()
        {
        }

        public TPut(byte[] row, List<TColumnValue> columnValues)
            : this()
        {
            this.Row = row;
            this.ColumnValues = columnValues;
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_row = false;
                bool isset_columnValues = false;
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Row = iprot.ReadBinary();
                                isset_row = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    ColumnValues = new List<TColumnValue>();
                                    TList _list17 = iprot.ReadListBegin();
                                    for (int _i18 = 0; _i18 < _list17.Count; ++_i18)
                                    {
                                        TColumnValue _elem19;
                                        _elem19 = new TColumnValue();
                                        _elem19.Read(iprot);
                                        ColumnValues.Add(_elem19);
                                    }
                                    iprot.ReadListEnd();
                                }
                                isset_columnValues = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I64)
                            {
                                Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.Map)
                            {
                                {
                                    Attributes = new Dictionary<byte[], byte[]>();
                                    TMap _map20 = iprot.ReadMapBegin();
                                    for (int _i21 = 0; _i21 < _map20.Count; ++_i21)
                                    {
                                        byte[] _key22;
                                        byte[] _val23;
                                        _key22 = iprot.ReadBinary();
                                        _val23 = iprot.ReadBinary();
                                        Attributes[_key22] = _val23;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 6:
                            if (field.Type == TType.I32)
                            {
                                Durability = (TDurability)iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 7:
                            if (field.Type == TType.Struct)
                            {
                                CellVisibility = new TCellVisibility();
                                CellVisibility.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
                if (!isset_row)
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                if (!isset_columnValues)
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TPut");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                field.Name = "row";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteBinary(Row);
                oprot.WriteFieldEnd();
                field.Name = "columnValues";
                field.Type = TType.List;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, ColumnValues.Count));
                    foreach (TColumnValue _iter24 in ColumnValues)
                    {
                        _iter24.Write(oprot);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
                if (__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Timestamp);
                    oprot.WriteFieldEnd();
                }
                if (Attributes != null && __isset.attributes)
                {
                    field.Name = "attributes";
                    field.Type = TType.Map;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Attributes.Count));
                        foreach (byte[] _iter25 in Attributes.Keys)
                        {
                            oprot.WriteBinary(_iter25);
                            oprot.WriteBinary(Attributes[_iter25]);
                        }
                        oprot.WriteMapEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.durability)
                {
                    field.Name = "durability";
                    field.Type = TType.I32;
                    field.ID = 6;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32((int)Durability);
                    oprot.WriteFieldEnd();
                }
                if (CellVisibility != null && __isset.cellVisibility)
                {
                    field.Name = "cellVisibility";
                    field.Type = TType.Struct;
                    field.ID = 7;
                    oprot.WriteFieldBegin(field);
                    CellVisibility.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("TPut(");
            __sb.Append(", Row: ");
            __sb.Append(Row);
            __sb.Append(", ColumnValues: ");
            __sb.Append(ColumnValues);
            if (__isset.timestamp)
            {
                __sb.Append(", Timestamp: ");
                __sb.Append(Timestamp);
            }
            if (Attributes != null && __isset.attributes)
            {
                __sb.Append(", Attributes: ");
                __sb.Append(Attributes);
            }
            if (__isset.durability)
            {
                __sb.Append(", Durability: ");
                __sb.Append(Durability);
            }
            if (CellVisibility != null && __isset.cellVisibility)
            {
                __sb.Append(", CellVisibility: ");
                __sb.Append(CellVisibility == null ? "<null>" : CellVisibility.ToString());
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}