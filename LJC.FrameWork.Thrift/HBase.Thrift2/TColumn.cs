/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace HBase.Thrift2
{
    /// <summary>
    /// Addresses a single cell or multiple cells
    /// in a HBase table by column family and optionally
    /// a column qualifier and timestamp
    /// </summary>
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TColumn : TBase
    {
        private byte[] _qualifier;
        private long _timestamp;

        public byte[] Family { get; set; }

        public byte[] Qualifier
        {
            get
            {
                return _qualifier;
            }
            set
            {
                __isset.qualifier = true;
                this._qualifier = value;
            }
        }

        public long Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                __isset.timestamp = true;
                this._timestamp = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool qualifier;
            public bool timestamp;
        }

        public TColumn()
        {
        }

        public TColumn(byte[] family)
            : this()
        {
            this.Family = family;
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_family = false;
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Family = iprot.ReadBinary();
                                isset_family = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Qualifier = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I64)
                            {
                                Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
                if (!isset_family)
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TColumn");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                field.Name = "family";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteBinary(Family);
                oprot.WriteFieldEnd();
                if (Qualifier != null && __isset.qualifier)
                {
                    field.Name = "qualifier";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(Qualifier);
                    oprot.WriteFieldEnd();
                }
                if (__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("TColumn(");
            __sb.Append(", Family: ");
            __sb.Append(Family);
            if (Qualifier != null && __isset.qualifier)
            {
                __sb.Append(", Qualifier: ");
                __sb.Append(Qualifier);
            }
            if (__isset.timestamp)
            {
                __sb.Append(", Timestamp: ");
                __sb.Append(Timestamp);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }
}
