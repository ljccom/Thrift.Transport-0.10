/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
namespace HBase.Thrift2
{

    /// <summary>
    /// Used to perform Get operations on a single row.
    /// 
    /// The scope can be further narrowed down by specifying a list of
    /// columns or column families.
    /// 
    /// To get everything for a row, instantiate a Get object with just the row to get.
    /// To further define the scope of what to get you can add a timestamp or time range
    /// with an optional maximum number of versions to return.
    /// 
    /// If you specify a time range and a timestamp the range is ignored.
    /// Timestamps on TColumns are ignored.
    /// </summary>
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TGet : TBase
    {
        private List<TColumn> _columns;
        private long _timestamp;
        private TTimeRange _timeRange;
        private int _maxVersions;
        private byte[] _filterString;
        private Dictionary<byte[], byte[]> _attributes;
        private TAuthorization _authorizations;

        public byte[] Row { get; set; }

        public List<TColumn> Columns
        {
            get
            {
                return _columns;
            }
            set
            {
                __isset.columns = true;
                this._columns = value;
            }
        }

        public long Timestamp
        {
            get
            {
                return _timestamp;
            }
            set
            {
                __isset.timestamp = true;
                this._timestamp = value;
            }
        }

        public TTimeRange TimeRange
        {
            get
            {
                return _timeRange;
            }
            set
            {
                __isset.timeRange = true;
                this._timeRange = value;
            }
        }

        public int MaxVersions
        {
            get
            {
                return _maxVersions;
            }
            set
            {
                __isset.maxVersions = true;
                this._maxVersions = value;
            }
        }

        public byte[] FilterString
        {
            get
            {
                return _filterString;
            }
            set
            {
                __isset.filterString = true;
                this._filterString = value;
            }
        }

        public Dictionary<byte[], byte[]> Attributes
        {
            get
            {
                return _attributes;
            }
            set
            {
                __isset.attributes = true;
                this._attributes = value;
            }
        }

        public TAuthorization Authorizations
        {
            get
            {
                return _authorizations;
            }
            set
            {
                __isset.authorizations = true;
                this._authorizations = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool columns;
            public bool timestamp;
            public bool timeRange;
            public bool maxVersions;
            public bool filterString;
            public bool attributes;
            public bool authorizations;
        }

        public TGet()
        {
        }

        public TGet(byte[] row)
            : this()
        {
            this.Row = row;
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_row = false;
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Row = iprot.ReadBinary();
                                isset_row = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    Columns = new List<TColumn>();
                                    TList _list8 = iprot.ReadListBegin();
                                    for (int _i9 = 0; _i9 < _list8.Count; ++_i9)
                                    {
                                        TColumn _elem10;
                                        _elem10 = new TColumn();
                                        _elem10.Read(iprot);
                                        Columns.Add(_elem10);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I64)
                            {
                                Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                TimeRange = new TTimeRange();
                                TimeRange.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.I32)
                            {
                                MaxVersions = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 6:
                            if (field.Type == TType.String)
                            {
                                FilterString = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 7:
                            if (field.Type == TType.Map)
                            {
                                {
                                    Attributes = new Dictionary<byte[], byte[]>();
                                    TMap _map11 = iprot.ReadMapBegin();
                                    for (int _i12 = 0; _i12 < _map11.Count; ++_i12)
                                    {
                                        byte[] _key13;
                                        byte[] _val14;
                                        _key13 = iprot.ReadBinary();
                                        _val14 = iprot.ReadBinary();
                                        Attributes[_key13] = _val14;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 8:
                            if (field.Type == TType.Struct)
                            {
                                Authorizations = new TAuthorization();
                                Authorizations.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
                if (!isset_row)
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TGet");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                field.Name = "row";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteBinary(Row);
                oprot.WriteFieldEnd();
                if (Columns != null && __isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, Columns.Count));
                        foreach (TColumn _iter15 in Columns)
                        {
                            _iter15.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(Timestamp);
                    oprot.WriteFieldEnd();
                }
                if (TimeRange != null && __isset.timeRange)
                {
                    field.Name = "timeRange";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    TimeRange.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                if (__isset.maxVersions)
                {
                    field.Name = "maxVersions";
                    field.Type = TType.I32;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(MaxVersions);
                    oprot.WriteFieldEnd();
                }
                if (FilterString != null && __isset.filterString)
                {
                    field.Name = "filterString";
                    field.Type = TType.String;
                    field.ID = 6;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(FilterString);
                    oprot.WriteFieldEnd();
                }
                if (Attributes != null && __isset.attributes)
                {
                    field.Name = "attributes";
                    field.Type = TType.Map;
                    field.ID = 7;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Attributes.Count));
                        foreach (byte[] _iter16 in Attributes.Keys)
                        {
                            oprot.WriteBinary(_iter16);
                            oprot.WriteBinary(Attributes[_iter16]);
                        }
                        oprot.WriteMapEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (Authorizations != null && __isset.authorizations)
                {
                    field.Name = "authorizations";
                    field.Type = TType.Struct;
                    field.ID = 8;
                    oprot.WriteFieldBegin(field);
                    Authorizations.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("TGet(");
            __sb.Append(", Row: ");
            __sb.Append(Row);
            if (Columns != null && __isset.columns)
            {
                __sb.Append(", Columns: ");
                __sb.Append(Columns);
            }
            if (__isset.timestamp)
            {
                __sb.Append(", Timestamp: ");
                __sb.Append(Timestamp);
            }
            if (TimeRange != null && __isset.timeRange)
            {
                __sb.Append(", TimeRange: ");
                __sb.Append(TimeRange == null ? "<null>" : TimeRange.ToString());
            }
            if (__isset.maxVersions)
            {
                __sb.Append(", MaxVersions: ");
                __sb.Append(MaxVersions);
            }
            if (FilterString != null && __isset.filterString)
            {
                __sb.Append(", FilterString: ");
                __sb.Append(FilterString);
            }
            if (Attributes != null && __isset.attributes)
            {
                __sb.Append(", Attributes: ");
                __sb.Append(Attributes);
            }
            if (Authorizations != null && __isset.authorizations)
            {
                __sb.Append(", Authorizations: ");
                __sb.Append(Authorizations == null ? "<null>" : Authorizations.ToString());
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }
}
